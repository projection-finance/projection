{"ast":null,"code":"var _jsxFileName = \"/Users/max/Documents/GitHub/Projection/src/components/projection/listActions.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport moment from \"moment\";\nimport { EDIT_ACTION_TO_Projection, DELETE_ACTION_TO_Projection } from '../../redux/projections/projection.types';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ModalEdit() {}\n\n_c = ModalEdit;\n\nfunction CardItem(_ref) {\n  _s();\n\n  let {\n    action,\n    projection\n  } = _ref;\n  const dispatch = useDispatch();\n  const sign = action.price - action.coin.currentPrice >= 0 ? '+' : '-';\n  const getVariation = Math.abs(action.price - action.coin.currentPrice) / action.coin.currentPrice * 100;\n\n  const deleteAction = () => {\n    if (window.confirm(\"Are you sure ?\")) dispatch({\n      type: DELETE_ACTION_TO_Projection,\n      payload: {\n        action,\n        projection\n      }\n    });\n  };\n\n  const editAction = () => {};\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"div\",\n        children: [\"$\", action.coin.symbol, \"/Price variation\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          mb: 1.5\n        },\n        color: \"text.secondary\",\n        children: moment(action.date).format('DD MMMM YYYY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"New Price : \", action.price, \"$(\", sign, getVariation, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: editAction,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: deleteAction,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardItem, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = CardItem;\nexport default function ListActions(_ref2) {\n  let {\n    projections\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: projections.map((prj, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: prj.actions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"div\",\n            sx: {\n              margin: '20px auto'\n            },\n            children: [\"Projection : \", prj.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              minWidth: 275,\n              margin: '20px auto',\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: prj.actions.map((act, index) => {\n              return /*#__PURE__*/_jsxDEV(Card, {\n                sx: {\n                  width: \"fit-content\"\n                },\n                variant: \"outlined\",\n                children: /*#__PURE__*/_jsxDEV(CardItem, {\n                  action: act,\n                  projection: prj\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 57\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 53\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true) : ''\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false);\n}\n_c3 = ListActions;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalEdit\");\n$RefreshReg$(_c2, \"CardItem\");\n$RefreshReg$(_c3, \"ListActions\");","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/components/projection/listActions.js"],"names":["React","Box","Card","CardActions","CardContent","Button","Typography","moment","EDIT_ACTION_TO_Projection","DELETE_ACTION_TO_Projection","useDispatch","ModalEdit","CardItem","action","projection","dispatch","sign","price","coin","currentPrice","getVariation","Math","abs","deleteAction","window","confirm","type","payload","editAction","symbol","mb","date","format","ListActions","projections","map","prj","index","actions","length","margin","name","minWidth","display","justifyContent","act","width"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,yBAAT,EAAmCC,2BAAnC,QAAqE,0CAArE;AACA,SAASC,WAAT,QAA4B,aAA5B;;;;AAEA,SAASC,SAAT,GAAoB,CAEnB;;KAFQA,S;;AAKT,SAASC,QAAT,OAAsC;AAAA;;AAAA,MAApB;AAACC,IAAAA,MAAD;AAAQC,IAAAA;AAAR,GAAoB;AAClC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,IAAI,GAAIH,MAAM,CAACI,KAAP,GAAaJ,MAAM,CAACK,IAAP,CAAYC,YAA1B,IAA2C,CAA3C,GAA+C,GAA/C,GAAoD,GAAjE;AACA,QAAMC,YAAY,GAAEC,IAAI,CAACC,GAAL,CAAUT,MAAM,CAACI,KAAP,GAAaJ,MAAM,CAACK,IAAP,CAAYC,YAAnC,IAAkDN,MAAM,CAACK,IAAP,CAAYC,YAA9D,GAA2E,GAA/F;;AACA,QAAMI,YAAY,GAAG,MAAM;AACvB,QAAGC,MAAM,CAACC,OAAP,CAAe,gBAAf,CAAH,EACIV,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEjB,2BAAR;AAAqCkB,MAAAA,OAAO,EAAE;AAACd,QAAAA,MAAD;AAAQC,QAAAA;AAAR;AAA9C,KAAD,CAAR;AACP,GAHD;;AAIA,QAAMc,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,WAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,SAAS,EAAC,KAAnC;AAAA,wBACIf,MAAM,CAACK,IAAP,CAAYW,MADhB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AAAY,QAAA,EAAE,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAhB;AAA6B,QAAA,KAAK,EAAC,gBAAnC;AAAA,kBACGvB,MAAM,CAACM,MAAM,CAACkB,IAAR,CAAN,CAAoBC,MAApB,CAA2B,cAA3B;AADH;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAAA,mCACenB,MAAM,CAACI,KADtB,QAC+BD,IAD/B,EACqCI,YADrC;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,WAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAEQ,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAEL,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA/BQX,Q;UACYF,W;;;MADZE,Q;AAiCT,eAAe,SAASqB,WAAT,QAAoC;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACjD,sBACE;AAAA,cAEQA,WAAW,CAACC,GAAZ,CAAgB,CAACC,GAAD,EAAKC,KAAL,KAAa;AACzB,0BAEI,QAAC,KAAD,CAAO,QAAP;AAAA,kBAGQD,GAAG,CAACE,OAAJ,CAAYC,MAAZ,GAAqB,CAArB,gBACI;AAAA,kCACI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAyB,YAAA,SAAS,EAAC,KAAnC;AAA0C,YAAA,EAAE,EAAE;AAAEC,cAAAA,MAAM,EAAC;AAAT,aAA9C;AAAA,wCACkBJ,GAAG,CAACK,IADtB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE;AAAEC,cAAAA,QAAQ,EAAE,GAAZ;AAAgBF,cAAAA,MAAM,EAAC,WAAvB;AAAmCG,cAAAA,OAAO,EAAE,MAA5C;AAAmDC,cAAAA,cAAc,EAAE;AAAnE,aAAT;AAAA,sBAGQR,GAAG,CAACE,OAAJ,CAAYH,GAAZ,CAAgB,CAACU,GAAD,EAAKR,KAAL,KAAa;AACzB,kCACI,QAAC,IAAD;AAAM,gBAAA,EAAE,EAAE;AAAES,kBAAAA,KAAK,EAAE;AAAT,iBAAV;AAAgD,gBAAA,OAAO,EAAC,UAAxD;AAAA,uCACI,QAAC,QAAD;AAAU,kBAAA,MAAM,EAAED,GAAlB;AAAuB,kBAAA,UAAU,EAAET;AAAnC;AAAA;AAAA;AAAA;AAAA;AADJ,iBAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA,sBADJ;AAKH,aAND;AAHR;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA,wBADJ,GAkBI;AArBZ,SAAqBA,KAArB;AAAA;AAAA;AAAA;AAAA,cAFJ;AA4BC,KA7BL;AAFR,mBADF;AAuCD;MAxCuBJ,W","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport moment from \"moment\";\nimport { EDIT_ACTION_TO_Projection,DELETE_ACTION_TO_Projection} from '../../redux/projections/projection.types';\nimport { useDispatch } from 'react-redux';\n\nfunction ModalEdit(){\n    \n}\n\n\nfunction CardItem({action,projection}){\n    const dispatch = useDispatch();\n    const sign = (action.price-action.coin.currentPrice) >= 0 ? '+' :'-'\n    const getVariation =Math.abs((action.price-action.coin.currentPrice))/action.coin.currentPrice*100\n    const deleteAction = () => {\n        if(window.confirm(\"Are you sure ?\"))\n            dispatch({ type: DELETE_ACTION_TO_Projection, payload: {action,projection} });\n    }\n    const editAction = () => {\n\n    }\n\n    return  (\n        <React.Fragment>\n          <CardContent>\n            <Typography variant=\"h5\" component=\"div\">\n              ${action.coin.symbol}/Price variation\n            </Typography>\n            <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n              {moment(action.date).format('DD MMMM YYYY')}\n            </Typography>\n            <Typography variant=\"body2\">\n              New Price : {action.price}$({sign}{getVariation}%)\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button variant=\"contained\" onClick={editAction}>Edit</Button>\n            <Button variant=\"contained\" onClick={deleteAction}>Delete</Button>\n          </CardActions>\n        </React.Fragment>\n      );\n}\n\nexport default function ListActions({projections}) {\n  return (\n    <>\n        {   \n            projections.map((prj,index)=>{\n                return (\n                    \n                    <React.Fragment key={index} >\n                        {\n                            \n                            prj.actions.length > 0 ? (\n                                <>\n                                    <Typography variant=\"h5\" component=\"div\"  sx={{ margin:'20px auto' }}>\n                                        Projection : {prj.name}\n                                    </Typography>\n                                    <Box sx={{ minWidth: 275,margin:'20px auto',display: 'flex',justifyContent: 'space-between' }}>\n                                        \n                                        {\n                                            prj.actions.map((act,index)=>{\n                                                return (\n                                                    <Card sx={{ width: \"fit-content\" }} key={index} variant=\"outlined\">\n                                                        <CardItem action={act} projection={prj} />\n                                                    </Card>\n                                                )\n                                            })\n                                        }\n                                    </Box>\n                                </>\n                            ) : ''\n                        }\n                        \n                    </React.Fragment>\n                  )\n                }\n            )\n        }\n    </>\n      \n   \n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}