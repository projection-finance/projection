{"ast":null,"code":"var _jsxFileName = \"/Users/max/Documents/GitHub/Projection/src/components/projection/projection.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { styled } from \"@mui/material/styles\";\nimport Stack from \"@mui/material/Stack\";\nimport Add_Edit_PorjectModal from \"../Modals/add_Edit_Project\";\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport MyChart from \"../Chart/myChart\";\nimport styles from \"./projection.module.css\";\nimport Action from \"../action/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    backgroundColor: \"initial\",\n    border: 0,\n    boxShadow: \"none\",\n    textDecoration: \"underline\",\n    color: \"#0D6EFD\",\n    cursor: \"pointer\"\n  };\n});\n_c = Item;\nconst ItemSlash = styled(Paper)(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    backgroundColor: \"initial\",\n    border: 0,\n    boxShadow: \"none\",\n    textDecoration: \"none\",\n    color: \"#6C757D\"\n  };\n});\n_c2 = ItemSlash;\nexport default function Projection() {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [who, setWho] = React.useState(0);\n  const {\n    projections\n  } = useSelector(state => state.projection);\n  const [projectionName, setProjctionName] = React.useState(\"\");\n  const [projectEdit, setProjctionEdit] = React.useState(null);\n  const [projection, setProjction] = React.useState(null);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  let {\n    projectionId\n  } = useParams();\n  React.useEffect(() => {\n    if (projectionId) {\n      const [firstItem] = projections.filter(prj => prj.id == projectionId);\n\n      if (firstItem) {\n        setProjctionEdit(firstItem);\n        setProjction(firstItem);\n        setWho(2);\n      } else setWho(0);\n    }\n\n    if (!projectEdit) {\n      const date = new Date();\n      setProjctionName(`projection_${date.getDate()}/${date.getMonth()}/${date.getFullYear()}_${date.getHours()}:${date.getMinutes()}`);\n    }\n\n    if (who === 0) handleOpen();\n  }, []);\n\n  const afterSave = projectionAdded => {\n    setProjction(projectionAdded);\n    setProjctionEdit(projectionAdded);\n    setWho(who + 1);\n  };\n\n  const elements = [/*#__PURE__*/_jsxDEV(Add_Edit_PorjectModal, {\n    afterSave: afterSave,\n    projectionName: projectionName,\n    projectEdit: projectEdit,\n    open: open,\n    handleClose: handleClose\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(MyChart, {\n    projection: projection\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Action, {\n    projection: projection\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this)];\n  const paths = [\"Projection\", \"Portfolio\", \"Actions\"];\n  const active = {\n    textDecoration: \"none\",\n    color: \"#6C757D \",\n    cursor: \"default\"\n  };\n\n  const goNext = index => {\n    //TODO validate if current is valide\n    if (index != 0 && !projection) handleOpen();else setWho(index);\n    if (who === 0) handleOpen();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"container\"],\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      children: paths.map((elem, index) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Item, {\n            sx: index === who ? active : {},\n            onClick: e => goNext(index),\n            children: elem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), index != paths.length - 1 ? /*#__PURE__*/_jsxDEV(ItemSlash, {\n            children: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 44\n          }, this) : \"\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), elements.map((elem, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: who === index ? elem : \"\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Projection, \"0SGgwbnD3RvlCVpgtoN0l8wT/jg=\", false, function () {\n  return [useSelector, useParams];\n});\n\n_c3 = Projection;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Item\");\n$RefreshReg$(_c2, \"ItemSlash\");\n$RefreshReg$(_c3, \"Projection\");","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/components/projection/projection.js"],"names":["React","Paper","styled","Stack","Add_Edit_PorjectModal","useParams","useSelector","MyChart","styles","Action","Item","theme","padding","spacing","textAlign","backgroundColor","border","boxShadow","textDecoration","color","cursor","ItemSlash","Projection","open","setOpen","useState","who","setWho","projections","state","projection","projectionName","setProjctionName","projectEdit","setProjctionEdit","setProjction","handleOpen","handleClose","projectionId","useEffect","firstItem","filter","prj","id","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","afterSave","projectionAdded","elements","paths","active","goNext","index","map","elem","e","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { styled } from \"@mui/material/styles\";\nimport Stack from \"@mui/material/Stack\";\nimport Add_Edit_PorjectModal from \"../Modals/add_Edit_Project\";\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport MyChart from \"../Chart/myChart\";\nimport styles from \"./projection.module.css\";\nimport Action from \"../action/action\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  backgroundColor: \"initial\",\n  border: 0,\n  boxShadow: \"none\",\n  textDecoration: \"underline\",\n  color: \"#0D6EFD\",\n  cursor: \"pointer\",\n}));\n\nconst ItemSlash = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  backgroundColor: \"initial\",\n  border: 0,\n  boxShadow: \"none\",\n  textDecoration: \"none\",\n  color: \"#6C757D\",\n}));\n\nexport default function Projection() {\n  const [open, setOpen] = React.useState(false);\n  const [who, setWho] = React.useState(0);\n  const { projections } = useSelector((state) => state.projection);\n  const [projectionName, setProjctionName] = React.useState(\"\");\n  const [projectEdit, setProjctionEdit] = React.useState(null);\n  const [projection, setProjction] = React.useState(null);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  let { projectionId } = useParams();\n  React.useEffect(() => {\n    if (projectionId) {\n      const [firstItem] = projections.filter((prj) => prj.id == projectionId);\n      if (firstItem) {\n        setProjctionEdit(firstItem);\n        setProjction(firstItem);\n        setWho(2)\n      }\n      else setWho(0)\n    }\n    if (!projectEdit) {\n      const date = new Date();\n      setProjctionName(\n        `projection_${date.getDate()}/${date.getMonth()}/${date.getFullYear()}_${date.getHours()}:${date.getMinutes()}`\n      );\n    }\n    if (who === 0) handleOpen();\n  }, []);\n\n  const afterSave = (projectionAdded) => {\n    setProjction(projectionAdded);\n    setProjctionEdit(projectionAdded);\n    setWho(who + 1);\n  };\n\n  const elements = [\n    <Add_Edit_PorjectModal\n      afterSave={afterSave}\n      projectionName={projectionName}\n      projectEdit={projectEdit}\n      open={open}\n      handleClose={handleClose}\n    />,\n\n    <MyChart projection={projection} />,\n    <Action projection={projection} />\n  ];\n\n  const paths = [\"Projection\", \"Portfolio\", \"Actions\"];\n  const active = {\n    textDecoration: \"none\",\n    color: \"#6C757D \",\n    cursor: \"default\",\n  };\n\n  const goNext = (index) => {\n    //TODO validate if current is valide\n    if (index != 0 && !projection) handleOpen();\n    else setWho(index);\n    if(who===0)\n      handleOpen()\n  };\n  return (\n    <div className={styles[\"container\"]}>\n      <Stack direction=\"row\">\n        {paths.map((elem, index) => {\n          return (\n            <React.Fragment key={index}>\n              <Item\n                sx={index === who ? active : {}}\n                onClick={(e) => goNext(index)}\n              >\n                {elem}\n              </Item>\n              {index != paths.length - 1 ? <ItemSlash>/</ItemSlash> : \"\"}\n            </React.Fragment>\n          );\n        })}\n      </Stack>\n      {elements.map((elem, index) => {\n        return <React.Fragment key={index}>{who === index ? elem : \"\"}</React.Fragment>;\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}