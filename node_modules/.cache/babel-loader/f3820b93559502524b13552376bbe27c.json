{"ast":null,"code":"import { ADD_Projection, EDIT_Projection, ADD_ACTION_TO_Projection, EDIT_ACTION_TO_Projection, DELETE_ACTION_TO_Projection } from \"./projection.types\";\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let projects, projectEdit;\n\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      project.actions = [];\n      const projections = [...state.projections, project];\n      localStorage.setItem(\"projections\", JSON.stringify(projections));\n      return { ...state,\n        projections\n      };\n\n    case EDIT_Projection:\n      projects = state.projections;\n      projectEdit = action.payload;\n      projects[projectEdit.id] = projectEdit;\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case ADD_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      projects[projectEdit.id].actions.push(action.payload.action);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case DELETE_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      const act = action.payload.action;\n      projects[projectEdit.id].actions = projects[projectEdit.id].actions.filter(acti => act.id !== acti.id);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.reducer.js"],"names":["ADD_Projection","EDIT_Projection","ADD_ACTION_TO_Projection","EDIT_ACTION_TO_Projection","DELETE_ACTION_TO_Projection","INITIAL_STATE","projections","JSON","parse","localStorage","getItem","project","reducer","state","action","projects","projectEdit","type","payload","id","length","actions","setItem","stringify","projection","push","act","filter","acti"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,EAA0CC,wBAA1C,EAAmEC,yBAAnE,EAA6FC,2BAA7F,QAA+H,oBAA/H;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,EAD5C;AAEpBC,EAAAA,OAAO,EAAE;AAFW,CAAtB;;AAKA,MAAMC,OAAO,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BR,aAA0B;AAAA,MAAXS,MAAW;AACjD,MAAKC,QAAL,EAAcC,WAAd;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAKjB,cAAL;AACE,YAAMW,OAAO,GAAGG,MAAM,CAACI,OAAvB;AACAP,MAAAA,OAAO,CAACQ,EAAR,GAAaN,KAAK,CAACP,WAAN,CAAkBc,MAA/B;AACAT,MAAAA,OAAO,CAACU,OAAR,GAAgB,EAAhB;AACA,YAAMf,WAAW,GAAG,CAAC,GAAGO,KAAK,CAACP,WAAV,EAAuBK,OAAvB,CAApB;AACAF,MAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAmCf,IAAI,CAACgB,SAAL,CAAejB,WAAf,CAAnC;AACA,aAAO,EACL,GAAGO,KADE;AAELP,QAAAA;AAFK,OAAP;;AAIF,SAAKL,eAAL;AACEc,MAAAA,QAAQ,GAAGF,KAAK,CAACP,WAAjB;AACAU,MAAAA,WAAW,GAAGF,MAAM,CAACI,OAArB;AACAH,MAAAA,QAAQ,CAACC,WAAW,CAACG,EAAb,CAAR,GAA2BH,WAA3B;AACAP,MAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAmCf,IAAI,CAACgB,SAAL,CAAeR,QAAf,CAAnC;AACA,aAAO,EACL,GAAGF,KADE;AAELP,QAAAA,WAAW,EAAES;AAFR,OAAP;;AAIF,SAAKb,wBAAL;AACEa,MAAAA,QAAQ,GAAGF,KAAK,CAACP,WAAjB;AACAU,MAAAA,WAAW,GAAGF,MAAM,CAACI,OAAP,CAAeM,UAA7B;AACAT,MAAAA,QAAQ,CAACC,WAAW,CAACG,EAAb,CAAR,CAAyBE,OAAzB,CAAiCI,IAAjC,CAAsCX,MAAM,CAACI,OAAP,CAAeJ,MAArD;AACAL,MAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAmCf,IAAI,CAACgB,SAAL,CAAeR,QAAf,CAAnC;AACA,aAAO,EACL,GAAGF,KADE;AAELP,QAAAA,WAAW,EAAES;AAFR,OAAP;;AAIF,SAAKX,2BAAL;AACEW,MAAAA,QAAQ,GAAGF,KAAK,CAACP,WAAjB;AACAU,MAAAA,WAAW,GAAGF,MAAM,CAACI,OAAP,CAAeM,UAA7B;AACA,YAAME,GAAG,GAAGZ,MAAM,CAACI,OAAP,CAAeJ,MAA3B;AACAC,MAAAA,QAAQ,CAACC,WAAW,CAACG,EAAb,CAAR,CAAyBE,OAAzB,GAAiCN,QAAQ,CAACC,WAAW,CAACG,EAAb,CAAR,CAAyBE,OAAzB,CAAiCM,MAAjC,CAAwCC,IAAI,IAAEF,GAAG,CAACP,EAAJ,KAASS,IAAI,CAACT,EAA5D,CAAjC;AACAV,MAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAmCf,IAAI,CAACgB,SAAL,CAAeR,QAAf,CAAnC;AACA,aAAO,EACL,GAAGF,KADE;AAELP,QAAAA,WAAW,EAAES;AAFR,OAAP;;AAKF;AACE,aAAOF,KAAP;AAzCJ;AA2CD,CA7CD;;AA+CA,eAAeD,OAAf","sourcesContent":["import { ADD_Projection, EDIT_Projection, ADD_ACTION_TO_Projection,EDIT_ACTION_TO_Projection,DELETE_ACTION_TO_Projection} from \"./projection.types\";\n\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null,\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  let  projects,projectEdit;\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      project.actions=[];\n      const projections = [...state.projections, project]\n      localStorage.setItem(\"projections\",JSON.stringify(projections))\n      return {\n        ...state,\n        projections,\n      };\n    case EDIT_Projection:\n      projects = state.projections;\n      projectEdit = action.payload;\n      projects[projectEdit.id] = projectEdit;\n      localStorage.setItem(\"projections\",JSON.stringify(projects))\n      return {\n        ...state,\n        projections: projects,\n      };\n    case ADD_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      projects[projectEdit.id].actions.push(action.payload.action);\n      localStorage.setItem(\"projections\",JSON.stringify(projects))\n      return {\n        ...state,\n        projections: projects,\n      };\n    case DELETE_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      const act = action.payload.action;\n      projects[projectEdit.id].actions=projects[projectEdit.id].actions.filter(acti=>act.id!==acti.id);\n      localStorage.setItem(\"projections\",JSON.stringify(projects))\n      return {\n        ...state,\n        projections: projects,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}