{"ast":null,"code":"import { ADD_Projection, EDIT_Projection } from \"./projection.types\";\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      const projections = [...state.projections, project];\n      localStorage.setItem(\"projections\", JSON.stringify(projections));\n      return { ...state,\n        projections\n      };\n\n    case EDIT_Projection:\n      const projects = state.projections;\n      const projectEdit = action.payload;\n      projects[projectEdit.id] = projectEdit;\n      console.log(projectEdit);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.reducer.js"],"names":["ADD_Projection","EDIT_Projection","INITIAL_STATE","projections","JSON","parse","localStorage","getItem","project","reducer","state","action","type","payload","id","length","setItem","stringify","projects","projectEdit","console","log"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,oBAAhD;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,KAAmD,EAD5C;AAEpBC,EAAAA,OAAO,EAAE;AAFW,CAAtB;;AAKA,MAAMC,OAAO,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BR,aAA0B;AAAA,MAAXS,MAAW;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,cAAL;AACE,YAAMQ,OAAO,GAAGG,MAAM,CAACE,OAAvB;AACAL,MAAAA,OAAO,CAACM,EAAR,GAAaJ,KAAK,CAACP,WAAN,CAAkBY,MAA/B;AACA,YAAMZ,WAAW,GAAG,CAAC,GAAGO,KAAK,CAACP,WAAV,EAAuBK,OAAvB,CAApB;AACAF,MAAAA,YAAY,CAACU,OAAb,CAAqB,aAArB,EAAmCZ,IAAI,CAACa,SAAL,CAAed,WAAf,CAAnC;AACA,aAAO,EACL,GAAGO,KADE;AAELP,QAAAA;AAFK,OAAP;;AAIF,SAAKF,eAAL;AACE,YAAMiB,QAAQ,GAAGR,KAAK,CAACP,WAAvB;AACA,YAAMgB,WAAW,GAAGR,MAAM,CAACE,OAA3B;AACAK,MAAAA,QAAQ,CAACC,WAAW,CAACL,EAAb,CAAR,GAA2BK,WAA3B;AAEFC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACEb,MAAAA,YAAY,CAACU,OAAb,CAAqB,aAArB,EAAmCZ,IAAI,CAACa,SAAL,CAAeC,QAAf,CAAnC;AACA,aAAO,EACL,GAAGR,KADE;AAELP,QAAAA,WAAW,EAAEe;AAFR,OAAP;;AAKF;AACE,aAAOR,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,eAAeD,OAAf","sourcesContent":["import { ADD_Projection, EDIT_Projection } from \"./projection.types\";\n\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null,\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      const projections = [...state.projections, project]\n      localStorage.setItem(\"projections\",JSON.stringify(projections))\n      return {\n        ...state,\n        projections,\n      };\n    case EDIT_Projection:\n      const projects = state.projections;\n      const projectEdit = action.payload;\n      projects[projectEdit.id] = projectEdit;\n      \n    console.log(projectEdit)\n      localStorage.setItem(\"projections\",JSON.stringify(projects))\n      return {\n        ...state,\n        projections: projects,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}