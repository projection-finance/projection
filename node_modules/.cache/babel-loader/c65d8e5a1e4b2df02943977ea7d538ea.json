{"ast":null,"code":"import { ADD_Projection, EDIT_Projection, ADD_ACTION_TO_Projection, EDIT_ACTION_TO_Projection, DELETE_ACTION_TO_Projection, ADD_EDIT_CHART_TO_Projection, DELETE_Projection } from \"./projection.types\";\nimport moment from \"moment\";\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null\n};\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\".split(\"\");\n  var color = \"#\";\n\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n}\n\nconst dateToMin = a => {\n  const formatDate = new Date(a);\n  const min = formatDate.getTime() / 60;\n  return min;\n};\n\nconst isChartExist = (label, array) => array.filter(elem => elem.label === label);\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let projects, projectEdit;\n\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      project.actions = [];\n      project.chart = [];\n      project.coins.forEach(element => {\n        project.chart.push({\n          label: element.symbol,\n          color: getRandomColor(),\n          mainData: [{\n            date: project.startDate,\n            x: dateToMin(project.startDate),\n            y: element.currentPrice,\n            init: true\n          }, {\n            date: project.endDate,\n            x: dateToMin(project.endDate),\n            y: element.currentPrice,\n            init: true\n          }]\n        });\n      });\n      const projections = [...state.projections, project];\n      localStorage.setItem(\"projections\", JSON.stringify(projections));\n      return { ...state,\n        projections\n      };\n\n    case EDIT_Projection:\n      projects = state.projections;\n      projectEdit = action.payload;\n      projectEdit.coins.forEach(element => {\n        let oldChart = isChartExist(element.symbol, projectEdit.chart);\n        console.log(oldChart);\n\n        if (oldChart.length !== 0) {\n          [oldChart] = oldChart;\n          oldChart.mainData = oldChart.mainData.map(d => {\n            if (d.init && (moment(d.date).format('YYYY-MM-DD') === moment(projectEdit.startDate).format('YYYY-MM-DD') || moment(d.date).format('YYYY-MM-DD') === moment(projectEdit.endDate).format('YYYY-MM-DD'))) {\n              d.y = element.currentPrice;\n            }\n\n            return d;\n          });\n          projectEdit.chart = projectEdit.chart.map(elem => {\n            if (elem.label === oldChart.label) {\n              elem = oldChart;\n            }\n\n            return elem;\n          });\n        } else projectEdit.chart.push({\n          label: element.symbol,\n          color: getRandomColor(),\n          mainData: [{\n            x: dateToMin(projectEdit.startDate),\n            y: element.currentPrice,\n            init: true\n          }, {\n            x: dateToMin(projectEdit.endDate),\n            y: element.currentPrice,\n            init: true\n          }]\n        });\n      });\n      projects[projectEdit.id] = projectEdit;\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case DELETE_Projection:\n      projects = state.projections;\n      const projectDelete = action.payload;\n      console.log(projectDelete);\n      projects = projects.filter(prj => prj.id !== projectDelete.id);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case ADD_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      projects[projectEdit.id].actions.push(action.payload.action);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case DELETE_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      const act = action.payload.action;\n      projects[projectEdit.id].actions = projects[projectEdit.id].actions.filter(acti => act.id !== acti.id);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    case ADD_EDIT_CHART_TO_Projection:\n      projects = state.projections;\n      projects[action.payload.id] = action.payload;\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return { ...state,\n        projections: projects\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.reducer.js"],"names":["ADD_Projection","EDIT_Projection","ADD_ACTION_TO_Projection","EDIT_ACTION_TO_Projection","DELETE_ACTION_TO_Projection","ADD_EDIT_CHART_TO_Projection","DELETE_Projection","moment","INITIAL_STATE","projections","JSON","parse","localStorage","getItem","project","getRandomColor","letters","split","color","i","Math","floor","random","dateToMin","a","formatDate","Date","min","getTime","isChartExist","label","array","filter","elem","reducer","state","action","projects","projectEdit","type","payload","id","length","actions","chart","coins","forEach","element","push","symbol","mainData","date","startDate","x","y","currentPrice","init","endDate","setItem","stringify","oldChart","console","log","map","d","format","projectDelete","prj","projection","act","acti"],"mappings":"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","sourcesContent":["import {\n  ADD_Projection,\n  EDIT_Projection,\n  ADD_ACTION_TO_Projection,\n  EDIT_ACTION_TO_Projection,\n  DELETE_ACTION_TO_Projection,\n  ADD_EDIT_CHART_TO_Projection,\n  DELETE_Projection,\n} from \"./projection.types\";\nimport moment from \"moment\";\nconst INITIAL_STATE = {\n  projections: JSON.parse(localStorage.getItem(\"projections\")) || [],\n  project: null,\n};\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\".split(\"\");\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nconst dateToMin = (a) => {\n  const formatDate = new Date(a);\n  const min = formatDate.getTime() / 60;\n  return min;\n};\nconst isChartExist = (label, array) =>\n  array.filter((elem) => elem.label === label);\nconst reducer = (state = INITIAL_STATE, action) => {\n  let projects, projectEdit;\n  switch (action.type) {\n    case ADD_Projection:\n      const project = action.payload;\n      project.id = state.projections.length;\n      project.actions = [];\n      project.chart = [];\n      project.coins.forEach((element) => {\n        project.chart.push({\n          label: element.symbol,\n          color: getRandomColor(),\n          mainData: [\n            {\n              date:project.startDate,\n              x: dateToMin(project.startDate),\n              y: element.currentPrice,\n              init: true,\n            },\n            {\n              date:project.endDate,\n              x: dateToMin(project.endDate),\n              y: element.currentPrice,\n              init: true,\n            },\n          ],\n        });\n      });\n      const projections = [...state.projections, project];\n      localStorage.setItem(\"projections\", JSON.stringify(projections));\n      return {\n        ...state,\n        projections,\n      };\n    case EDIT_Projection:\n      projects = state.projections;\n      projectEdit = action.payload;\n      projectEdit.coins.forEach((element) => {\n        let oldChart=isChartExist(element.symbol,projectEdit.chart)\n        console.log(oldChart)\n        if(oldChart.length !== 0){\n          [oldChart]=oldChart;\n          oldChart.mainData=oldChart.mainData.map(d=>{\n            if(d.init && (moment(d.date).format('YYYY-MM-DD')===moment(projectEdit.startDate).format('YYYY-MM-DD') || moment(d.date).format('YYYY-MM-DD')===moment(projectEdit.endDate).format('YYYY-MM-DD'))){\n              d.y=element.currentPrice\n            }\n            return d;\n          })\n          projectEdit.chart=projectEdit.chart.map(elem=>{\n              if(elem.label === oldChart.label){\n                elem=oldChart;\n              }\n              return elem;\n\n          })\n        }\n        else\n        projectEdit.chart.push({\n            label: element.symbol,\n            color: getRandomColor(),\n            mainData: [\n              {\n                x: dateToMin(projectEdit.startDate),\n                y: element.currentPrice,\n                init: true,\n              },\n              {\n                x: dateToMin(projectEdit.endDate),\n                y: element.currentPrice,\n                init: true,\n              },\n            ],\n          });\n      });\n\n      projects[projectEdit.id] = projectEdit;\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return {\n        ...state,\n        projections: projects,\n      };\n    case DELETE_Projection:\n      projects = state.projections;\n      const projectDelete = action.payload;\n      console.log(projectDelete);\n      projects = projects.filter((prj) => prj.id !== projectDelete.id);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return {\n        ...state,\n        projections: projects,\n      };\n    case ADD_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      projects[projectEdit.id].actions.push(action.payload.action);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return {\n        ...state,\n        projections: projects,\n      };\n    case DELETE_ACTION_TO_Projection:\n      projects = state.projections;\n      projectEdit = action.payload.projection;\n      const act = action.payload.action;\n      projects[projectEdit.id].actions = projects[\n        projectEdit.id\n      ].actions.filter((acti) => act.id !== acti.id);\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return {\n        ...state,\n        projections: projects,\n      };\n    case ADD_EDIT_CHART_TO_Projection:\n      projects = state.projections;\n      projects[action.payload.id] = action.payload;\n      localStorage.setItem(\"projections\", JSON.stringify(projects));\n      return {\n        ...state,\n        projections: projects,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}