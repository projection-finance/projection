{"ast":null,"code":"var _jsxFileName = \"/Users/max/Documents/GitHub/Projection/src/components/Modals/addProject.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport styles from './addProject.module.css';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport SelectedCoinsTable from './selectedCoinsTable';\nimport { getCoins } from '../../adapters/apis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  p: 4\n};\nexport default function AddProjectModal() {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [coins, setCoins] = React.useState([]);\n  const [selectedCoins, setSelectedCoins] = React.useState([]);\n\n  const addCoins = value => {\n    const exist = selectedCoins.some(elem => elem.name == value.name);\n\n    if (!exist) {\n      selectedCoins.push(value);\n      setSelectedCoins(selectedCoins);\n    }\n  };\n\n  React.useEffect(() => {\n    const localCoins = localStorage.getItem(\"coins\");\n    if (!localCoins || JSON.parse(localCoins).length == 0) getCoins().then(res => {\n      setCoins(res.data);\n      localStorage.setItem(\"coins\", JSON.stringify(res.data));\n    });else setCoins(JSON.parse(localCoins));\n  }, []);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleOpen,\n      className: styles[\"btnCenter\"],\n      children: \"New Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        className: styles[\"modal\"],\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Configure your projection, by adding assets to your portfolio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          value: value,\n          onChange: (event, newValue) => {\n            if (typeof newValue === 'string') {\n              setValue({\n                name: newValue\n              });\n              addCoins(newValue);\n            } else if (newValue && newValue.inputValue) {\n              // Create a new value from the user input\n              setValue({\n                name: newValue.inputValue\n              });\n              addCoins({\n                name: newValue.inputValue,\n                symbol: \"\"\n              });\n            } else {\n              setValue(newValue);\n              if (newValue) addCoins(newValue);\n            }\n          },\n          filterOptions: (options, params) => {\n            const {\n              inputValue\n            } = params;\n            if (inputValue.length == 0) return [];\n            const filtered = options.filter(item => item.name.toLowerCase().startsWith(inputValue) || item.symbol.toLowerCase().startsWith(inputValue)); // Suggest the creation of a new value\n\n            const isExisting = options.some(option => inputValue === option.name);\n\n            if (inputValue !== '' && !isExisting) {\n              filtered.push({\n                inputValue,\n                name: `Add \"${inputValue}\"`\n              });\n            }\n\n            return filtered;\n          },\n          selectOnFocus: true,\n          clearOnBlur: true,\n          handleHomeEndKeys: true,\n          id: \"free-solo-with-text-demo\",\n          options: coins,\n          getOptionLabel: option => {\n            if (typeof option === 'string') {\n              return option;\n            }\n\n            if (option.inputValue) {\n              return option.inputValue;\n            }\n\n            return option.name;\n          },\n          renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n            children: option.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 48\n          }, this),\n          sx: {\n            width: 300\n          },\n          freeSolo: true,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Assets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), selectedCoins.length ? /*#__PURE__*/_jsxDEV(SelectedCoinsTable, {\n          coins: selectedCoins\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 39\n        }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"modal-footer\"],\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddProjectModal, \"SmVUhCQWWxDLUiml5iH86SYgWMs=\");\n\n_c = AddProjectModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProjectModal\");","map":{"version":3,"sources":["/Users/max/Documents/GitHub/Projection/src/components/Modals/addProject.js"],"names":["React","Box","Button","Typography","Modal","styles","TextField","Autocomplete","createFilterOptions","SelectedCoinsTable","getCoins","filter","style","position","top","left","transform","width","bgcolor","p","AddProjectModal","value","setValue","useState","open","setOpen","coins","setCoins","selectedCoins","setSelectedCoins","addCoins","exist","some","elem","name","push","useEffect","localCoins","localStorage","getItem","JSON","parse","length","then","res","data","setItem","stringify","handleOpen","handleClose","mt","event","newValue","inputValue","symbol","options","params","filtered","item","toLowerCase","startsWith","isExisting","option","props"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport styles from './addProject.module.css';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport SelectedCoinsTable from './selectedCoinsTable';\nimport { getCoins } from '../../adapters/apis';\n\nconst filter = createFilterOptions();\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  p: 4,\n};\n\nexport default function AddProjectModal() {\n  const [value, setValue] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [coins,setCoins] = React.useState([]);\n  const [selectedCoins,setSelectedCoins] = React.useState([]);\n  const addCoins = (value) =>{\n    const exist=selectedCoins.some(elem=>elem.name==value.name)\n    if(!exist){\n      selectedCoins.push(value)\n      setSelectedCoins(selectedCoins)\n    }\n  }\n  React.useEffect(() => {\n    const localCoins=localStorage.getItem(\"coins\")\n\n    if(!localCoins || JSON.parse(localCoins).length==0)\n      getCoins().then(res=>{\n        setCoins(res.data)\n        localStorage.setItem(\"coins\",JSON.stringify(res.data))\n      })\n    else\n      setCoins(JSON.parse(localCoins))\n  },[]);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return (\n    <div>\n      <Button  variant=\"contained\" onClick={handleOpen} className={styles[\"btnCenter\"]}>New Projects</Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style} className={styles[\"modal\"]}>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Configure your projection, by adding assets to your portfolio \n          </Typography>\n          <Autocomplete\n              value={value}\n              onChange={(event, newValue) => {\n                if (typeof newValue === 'string') {\n                  setValue({\n                    name: newValue,\n                  });\n                  addCoins(newValue)\n                } else if (newValue && newValue.inputValue) {\n                  // Create a new value from the user input\n                  setValue({\n                    name: newValue.inputValue,\n                  });\n                  addCoins({name:newValue.inputValue,symbol:\"\"})\n                } else {\n                  setValue(newValue);\n                  if(newValue)\n                  addCoins(newValue)\n                  \n                }\n              }}\n              filterOptions={(options, params) => {\n                const { inputValue } = params;\n                if(inputValue.length == 0)\n                  return [];\n                const filtered = options.filter((item)=>item.name.toLowerCase().startsWith(inputValue) || item.symbol.toLowerCase().startsWith(inputValue));\n                \n                // Suggest the creation of a new value\n                const isExisting = options.some((option) => inputValue === option.name);\n                if (inputValue !== '' && !isExisting) {\n                  filtered.push({\n                    inputValue,\n                    name: `Add \"${inputValue}\"`,\n                  });\n                }\n\n                return filtered;\n              }}\n              selectOnFocus\n              clearOnBlur\n              handleHomeEndKeys\n              id=\"free-solo-with-text-demo\"\n              options={coins}\n              getOptionLabel={(option) => {\n                if (typeof option === 'string') {\n                  return option;\n                }\n                if (option.inputValue) {\n                  return option.inputValue;\n                }\n                return option.name;\n              }}\n              renderOption={(props, option) => <li {...props} >{option.name}</li>}\n              sx={{ width: 300 }}\n              freeSolo\n              renderInput={(params) => (\n                <TextField {...params} label=\"Assets\" />\n              )}\n            />\n            {\n              selectedCoins.length ?  <SelectedCoinsTable coins={selectedCoins} /> : ''\n            }\n           \n\n          <div className={styles[\"modal-footer\"]}>\n            <Button variant=\"contained\" >Save Changes</Button>\n            <Button variant=\"outlined\" onClick={handleClose}>Close</Button>\n            \n\n          </div>\n\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}