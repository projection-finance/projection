[{"/Users/max/Documents/GitHub/Projection/src/index.js":"1","/Users/max/Documents/GitHub/Projection/src/App.js":"2","/Users/max/Documents/GitHub/Projection/src/reportWebVitals.js":"3","/Users/max/Documents/GitHub/Projection/src/components/NavBar/navBar.js":"4","/Users/max/Documents/GitHub/Projection/src/components/Home/home.js":"5","/Users/max/Documents/GitHub/Projection/src/components/Modals/selectedCoinsTable.js":"6","/Users/max/Documents/GitHub/Projection/src/adapters/apis.js":"7","/Users/max/Documents/GitHub/Projection/src/redux/store.js":"8","/Users/max/Documents/GitHub/Projection/src/redux/rootReducer.js":"9","/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.reducer.js":"10","/Users/max/Documents/GitHub/Projection/src/components/projection/projectionTable.js":"11","/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.types.js":"12","/Users/max/Documents/GitHub/Projection/src/components/projection/listActions.js":"13","/Users/max/Documents/GitHub/Projection/src/components/Modals/action.js":"14","/Users/max/Documents/GitHub/Projection/src/router.js":"15","/Users/max/Documents/GitHub/Projection/src/components/projection/projection.js":"16","/Users/max/Documents/GitHub/Projection/src/components/projection/myProjections.js":"17","/Users/max/Documents/GitHub/Projection/src/components/Modals/add_Edit_Project.js":"18","/Users/max/Documents/GitHub/Projection/src/components/Chart/myChart.js":"19","/Users/max/Documents/GitHub/Projection/src/components/Chart/chartjs-plugin-dragdata.js":"20","/Users/max/Documents/GitHub/Projection/src/components/Modals/selectAssets.js":"21","/Users/max/Documents/GitHub/Projection/src/components/action/action.js":"22","/Users/max/Documents/GitHub/Projection/src/components/Modals/actionListModal.js":"23","/Users/max/Documents/GitHub/Projection/src/components/action/swap.js":"24"},{"size":632,"mtime":1641988474081,"results":"25","hashOfConfig":"26"},{"size":589,"mtime":1644096546124,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1641909252000,"results":"28","hashOfConfig":"26"},{"size":5042,"mtime":1644053693822,"results":"29","hashOfConfig":"26"},{"size":517,"mtime":1644053693815,"results":"30","hashOfConfig":"26"},{"size":4814,"mtime":1644133763757,"results":"31","hashOfConfig":"26"},{"size":144,"mtime":1644053693808,"results":"32","hashOfConfig":"26"},{"size":229,"mtime":1641988474085,"results":"33","hashOfConfig":"26"},{"size":212,"mtime":1642499166779,"results":"34","hashOfConfig":"26"},{"size":5174,"mtime":1644133763763,"results":"35","hashOfConfig":"26"},{"size":5120,"mtime":1644096546126,"results":"36","hashOfConfig":"26"},{"size":441,"mtime":1644096546128,"results":"37","hashOfConfig":"26"},{"size":3012,"mtime":1644053693822,"results":"38","hashOfConfig":"26"},{"size":6281,"mtime":1644053693816,"results":"39","hashOfConfig":"26"},{"size":765,"mtime":1644096546128,"results":"40","hashOfConfig":"26"},{"size":3364,"mtime":1644133763762,"results":"41","hashOfConfig":"26"},{"size":538,"mtime":1644053693823,"results":"42","hashOfConfig":"26"},{"size":6158,"mtime":1644133763756,"results":"43","hashOfConfig":"26"},{"size":14985,"mtime":1644133763754,"results":"44","hashOfConfig":"26"},{"size":10330,"mtime":1644053693813,"results":"45","hashOfConfig":"26"},{"size":6810,"mtime":1644053693819,"results":"46","hashOfConfig":"26"},{"size":3981,"mtime":1644133763757,"results":"47","hashOfConfig":"26"},{"size":5937,"mtime":1644133763755,"results":"48","hashOfConfig":"26"},{"size":14916,"mtime":1644133763758,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"107rbdp",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/max/Documents/GitHub/Projection/src/index.js",[],["105","106"],"/Users/max/Documents/GitHub/Projection/src/App.js",["107"],"import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar/navBar\";\nimport Home from \"./components/Home/home\";\nimport routers from \"./router\";\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <NavBar routers={routers.filter((route) => route.navBar)} />\n      </header>\n\n      <Routes>\n        {routers.map((route, index) => (\n          <Route\n            key={index}\n            path={route.path}\n            element={route.component}\n          />\n        ))}\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/max/Documents/GitHub/Projection/src/reportWebVitals.js",[],"/Users/max/Documents/GitHub/Projection/src/components/NavBar/navBar.js",["108"],"import * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"@mui/material/Button\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { Link } from \"react-router-dom\";\n\nexport default function NavBar({ routers }) {\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\n  const [selectedIndex, setSelectdIndex] = React.useState(0);\n  const title = \"Projection.finance\";\n  const handleOpenNavMenu = (event) => {\n    setAnchorElNav(event.currentTarget);\n  };\n\n  const handleCloseNavMenu = () => {\n    setAnchorElNav(null);\n  };\n\n  const handleSelectdIndexChange = (index) => {\n    setSelectdIndex(index);\n    handleCloseNavMenu();\n  };\n\n  React.useEffect(() => {\n    routers.forEach((route, index) => {\n      if (route.path === window.location.pathname) {\n        setSelectdIndex(index);\n      }\n    });\n  }, []);\n\n  return (\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ mr: 2, display: { xs: \"none\", md: \"flex\" } }}\n          >\n            {title}\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"left\",\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: \"block\", md: \"none\" },\n              }}\n            >\n              {routers.map((page, index) => (\n                <MenuItem\n                  key={index}\n                  onClick={(e) => handleSelectdIndexChange(index)}\n                  style={{\n                    backgroundColor:\n                      index === selectedIndex ? \"rgba(33, 37, 41, 0.4)\" : \"\",\n                  }}\n                >\n                  <Link\n                    to={page.path}\n                    style={{\n                      textDecoration: \"none\",\n                    }}\n                  >\n                    <Typography\n                      sx={{\n                        color: \"black\",\n                      }}\n                      textAlign=\"center\"\n                    >\n                      {page.name}\n                    </Typography>\n                  </Link>\n                </MenuItem>\n              ))}\n              <MenuItem>\n                <Typography\n                  sx={{\n                    color: \"black\",\n                  }}\n                  textAlign=\"center\"\n                >\n                  Connect to web 3\n                </Typography>\n              </MenuItem>\n            </Menu>\n          </Box>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}\n          >\n            {title}\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\n            {routers.map((page, index) => (\n              <Link\n                key={index}\n                onClick={(e) => handleSelectdIndexChange(index)}\n                to={page.path}\n                style={{\n                  textDecoration: \"none\",\n                }}\n              >\n                <Button\n                  onClick={(e) => handleSelectdIndexChange(index)}\n                  sx={{\n                    my: 2,\n                    ml: 10,\n                    color: \"white\",\n                    display: \"block\",\n                    backgroundColor:\n                      index === selectedIndex ? \"rgba(33, 37, 41, 0.4)\" : \"\",\n                  }}\n                >\n                  {page.name}\n                </Button>\n              </Link>\n            ))}\n\n            <Button\n              sx={{\n                my: 2,\n                ml: \"auto\",\n                color: \"white\",\n                display: \"block\",\n                border: \"1px solid white\",\n              }}\n            >\n              Connect to web 3\n            </Button>\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n}\n","/Users/max/Documents/GitHub/Projection/src/components/Home/home.js",[],"/Users/max/Documents/GitHub/Projection/src/components/Modals/selectedCoinsTable.js",[],"/Users/max/Documents/GitHub/Projection/src/adapters/apis.js",[],"/Users/max/Documents/GitHub/Projection/src/redux/store.js",[],"/Users/max/Documents/GitHub/Projection/src/redux/rootReducer.js",[],"/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.reducer.js",["109"],"/Users/max/Documents/GitHub/Projection/src/components/projection/projectionTable.js",["110","111","112"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Collapse from \"@mui/material/Collapse\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Typography from \"@mui/material/Typography\";\nimport Paper from \"@mui/material/Paper\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\nimport Button from \"@mui/material/Button\";\nimport SelectedCoinsTable from \"../Modals/selectedCoinsTable\";\nimport moment from \"moment\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport Action1 from \"../Modals/action\";\nimport Add_Edit_PorjectModal from \"../Modals/add_Edit_Project\";\nimport { useDispatch } from \"react-redux\";\nimport { DELETE_Projection } from \"../../redux/projections/projection.types\";\nimport { useNavigate  } from \"react-router-dom\";\n\nfunction Row(props) {\n  const { projection, actionsProj } =\n    props;\n  const [open, setOpen] = React.useState(false);\n  const [actionValue, setActionValue] = React.useState(0);\n  const handleChange = (event) => {\n    const item = event.target.value;\n    setActionValue(item);\n    actionsProj[item].action(projection);\n    setActionValue(-1);\n  };\n  \n  return (\n    <React.Fragment>\n      <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {projection.name}\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {moment(projection.startDate).format(\"DD-MM-YYYY\")}\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {moment(projection.endDate).format(\"DD-MM-YYYY\")}\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          <FormControl fullWidth>\n            <InputLabel id=\"demo-simple-select-label\">Actions</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              label=\"Make Action\"\n              onChange={handleChange}\n              value={actionValue}\n            >\n              {actionsProj.map((action, index) => {\n                return (\n                  <MenuItem key={index} value={index}>\n                    {action.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Coins\n              </Typography>\n              <SelectedCoinsTable coins={projection.coins} />\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nexport default function ProjctionTable({ projections }) {\n  const dispatch = useDispatch();\n  const history = useNavigate ();\n  const handleEditProjection = (selectedProjection) => {\n    history(`/projection/${selectedProjection.id}`);\n\n  };\n  const handleDeleteProjection = (selectedProjection) => {\n    dispatch({ type: DELETE_Projection, payload: selectedProjection });\n  };\n  const actionsProj = [\n    {\n      name: \"Select Action\",\n      action: ()=>\"\",\n    },\n    {\n      name: \"View\",\n      action: handleEditProjection,\n    },\n    {\n      name: \"Delete\",\n      action: handleDeleteProjection,\n    },\n  ];\n /*OLD action TODO remove\n {openAction1 ? (\n    <Action1\n      action={selectedAction}\n      open={openAction1}\n      projection={selectedProjection}\n      handleClose={handleCloseAction1}\n    />\n  ) : (\n    \"\"\n  )}*/\n  return (\n    <>\n      {\" \"}\n     \n      <TableContainer component={Paper}>\n        <Table aria-label=\"collapsible table\">\n          <TableHead>\n            <TableRow>\n              <TableCell />\n              <TableCell>Name</TableCell>\n              <TableCell>Start Date</TableCell>\n              <TableCell>End Date</TableCell>\n              <TableCell>Options</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {projections.map((prj, index) => (\n              <Row\n                key={index}\n                projection={prj}\n                actionsProj={actionsProj}\n              />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n","/Users/max/Documents/GitHub/Projection/src/redux/projections/projection.types.js",[],"/Users/max/Documents/GitHub/Projection/src/components/projection/listActions.js",["113","114"],"import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport moment from \"moment\";\nimport {\n  EDIT_ACTION_TO_Projection,\n  DELETE_ACTION_TO_Projection,\n} from \"../../redux/projections/projection.types\";\nimport { useDispatch } from \"react-redux\";\n\nfunction ModalEdit() {}\n\nfunction CardItem({ action, projection }) {\n  const dispatch = useDispatch();\n  const sign = action.price - action.coin.currentPrice >= 0 ? \"+\" : \"-\";\n  const getVariation =\n    (Math.abs(action.price - action.coin.currentPrice) /\n      action.coin.currentPrice) *\n    100;\n  const deleteAction = () => {\n    if (window.confirm(\"Are you sure ?\"))\n      dispatch({\n        type: DELETE_ACTION_TO_Projection,\n        payload: { action, projection },\n      });\n  };\n  const editAction = () => {};\n\n  return (\n    <React.Fragment>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"div\">\n          ${action.coin.symbol}/Price variation\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {moment(action.date).format(\"DD MMMM YYYY\")}\n        </Typography>\n        <Typography variant=\"body2\">\n          New Price : {action.price}$({sign}\n          {getVariation}%)\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button variant=\"contained\" onClick={editAction}>\n          Edit\n        </Button>\n        <Button variant=\"contained\" onClick={deleteAction}>\n          Delete\n        </Button>\n      </CardActions>\n    </React.Fragment>\n  );\n}\n\nexport default function ListActions({ projections }) {\n  return (\n    <>\n      {projections.map((prj, index) => {\n        return (\n          <React.Fragment key={index}>\n            {prj.actions?.length > 0 ? (\n              <>\n                <Typography\n                  variant=\"h5\"\n                  component=\"div\"\n                  sx={{ margin: \"20px auto\" }}\n                >\n                  Projection : {prj.name}\n                </Typography>\n                <Box\n                  sx={{\n                    minWidth: 275,\n                    margin: \"20px auto\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  {prj.actions.map((act, index) => {\n                    return (\n                      <Card\n                        sx={{ width: \"fit-content\" }}\n                        key={index}\n                        variant=\"outlined\"\n                      >\n                        <CardItem action={act} projection={prj} />\n                      </Card>\n                    );\n                  })}\n                </Box>\n              </>\n            ) : (\n              \"\"\n            )}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","/Users/max/Documents/GitHub/Projection/src/components/Modals/action.js",[],"/Users/max/Documents/GitHub/Projection/src/router.js",[],"/Users/max/Documents/GitHub/Projection/src/components/projection/projection.js",["115","116","117","118","119"],"/Users/max/Documents/GitHub/Projection/src/components/projection/myProjections.js",[],"/Users/max/Documents/GitHub/Projection/src/components/Modals/add_Edit_Project.js",[],"/Users/max/Documents/GitHub/Projection/src/components/Chart/myChart.js",["120"],"/Users/max/Documents/GitHub/Projection/src/components/Chart/chartjs-plugin-dragdata.js",["121"],"import { Chart } from \"chart.js\";\nimport { drag } from \"d3-drag\";\nimport { select } from \"d3-selection\";\nlet element,\n  yAxisID,\n  xAxisID,\n  rAxisID,\n  type,\n  stacked,\n  floatingBar,\n  initValue,\n  curDatasetIndex,\n  curIndex,\n  eventSettings;\nlet isDragging = false;\n\nfunction getSafe(func) {\n  try {\n    return func();\n  } catch (e) {\n    return \"\";\n  }\n}\n\nconst getElement = (e, chartInstance, callback) => {\n  element = chartInstance.getElementsAtEventForMode(\n    e,\n    \"nearest\",\n    { intersect: true },\n    false\n  )[0];\n  type = chartInstance.config.type;\n\n  if (element) {\n    let datasetIndex = element.datasetIndex;\n    let index = element.index;\n    // save element settings\n    eventSettings = getSafe(\n      () => chartInstance.config.options.plugins.tooltip.animation\n    );\n\n    const dataset = chartInstance.data.datasets[datasetIndex];\n    const datasetMeta = chartInstance.getDatasetMeta(datasetIndex);\n    let curValue = dataset.data[index];\n    // get the id of the datasets scale\n    xAxisID = datasetMeta.xAxisID;\n    yAxisID = datasetMeta.yAxisID;\n    rAxisID = datasetMeta.rAxisID;\n\n    // check if dragging the dataset or datapoint is prohibited\n    if (\n      dataset.dragData === false ||\n      (chartInstance.config.options.scales[xAxisID] &&\n        chartInstance.config.options.scales[xAxisID].dragData === false) ||\n      (chartInstance.config.options.scales[yAxisID] &&\n        chartInstance.config.options.scales[yAxisID].dragData === false) ||\n      (chartInstance.config.options.scales[rAxisID] &&\n        chartInstance.config.options.scales[rAxisID].rAxisID === false) ||\n      dataset.data[element.index].dragData === false\n    ) {\n      element = null;\n      return;\n    }\n\n    if (type === \"bar\") {\n      stacked = chartInstance.config.options.scales[xAxisID].stacked;\n\n      // if a bar has a data point that is an array of length 2, it's a floating bar\n      const samplePoint = chartInstance.data.datasets[0].data[0];\n      floatingBar =\n        samplePoint !== null &&\n        Array.isArray(samplePoint) &&\n        samplePoint.length === 2;\n\n      let data = {};\n      let newPos = calcPosition(e, chartInstance, datasetIndex, index, data);\n      initValue = newPos - curValue;\n    }\n\n    // disable the tooltip animation\n    if (\n      chartInstance.config.options.plugins.dragData.showTooltip === undefined ||\n      chartInstance.config.options.plugins.dragData.showTooltip\n    ) {\n      if (!chartInstance.config.options.plugins.tooltip)\n        chartInstance.config.options.plugins.tooltip = {};\n      chartInstance.config.options.plugins.tooltip.animation = false;\n    }\n\n    if (typeof callback === \"function\" && element) {\n      if (callback(e, datasetIndex, index, curValue) === false) {\n        element = null;\n      }\n    }\n  }\n};\n\nfunction roundValue(value, pos) {\n  if (!isNaN(pos)) {\n    return Math.round(value * Math.pow(10, pos)) / Math.pow(10, pos);\n  }\n  return value;\n}\n\nfunction calcRadar(e, chartInstance) {\n  let x, y, v;\n  if (e.touches) {\n    x =\n      e.touches[0].clientX - chartInstance.canvas.getBoundingClientRect().left;\n    y = e.touches[0].clientY - chartInstance.canvas.getBoundingClientRect().top;\n  } else {\n    x = e.clientX - chartInstance.canvas.getBoundingClientRect().left;\n    y = e.clientY - chartInstance.canvas.getBoundingClientRect().top;\n  }\n  let rScale = chartInstance.scales[rAxisID];\n  let d = Math.sqrt(\n    Math.pow(x - rScale.xCenter, 2) + Math.pow(y - rScale.yCenter, 2)\n  );\n  let scalingFactor = rScale.drawingArea / (rScale.max - rScale.min);\n  if (rScale.options.ticks.reverse) {\n    v = rScale.max - d / scalingFactor;\n  } else {\n    v = rScale.min + d / scalingFactor;\n  }\n\n  v = roundValue(v, chartInstance.config.options.plugins.dragData.round);\n\n  v =\n    v > chartInstance.scales[rAxisID].max\n      ? chartInstance.scales[rAxisID].max\n      : v;\n  v =\n    v < chartInstance.scales[rAxisID].min\n      ? chartInstance.scales[rAxisID].min\n      : v;\n\n  return v;\n}\n\nfunction calcPosition(e, chartInstance, datasetIndex, index, data) {\n  let x, y;\n  const dataPoint = chartInstance.data.datasets[datasetIndex].data[index];\n\n  if (e.touches) {\n    x = chartInstance.scales[xAxisID].getValueForPixel(\n      e.touches[0].clientX - chartInstance.canvas.getBoundingClientRect().left\n    );\n    y = chartInstance.scales[yAxisID].getValueForPixel(\n      e.touches[0].clientY - chartInstance.canvas.getBoundingClientRect().top\n    );\n  } else {\n    x = chartInstance.scales[xAxisID].getValueForPixel(\n      e.clientX - chartInstance.canvas.getBoundingClientRect().left\n    );\n    y = chartInstance.scales[yAxisID].getValueForPixel(\n      e.clientY - chartInstance.canvas.getBoundingClientRect().top\n    );\n  }\n\n  x = roundValue(x, chartInstance.config.options.plugins.dragData.round);\n  y = roundValue(y, chartInstance.config.options.plugins.dragData.round);\n\n  x =\n    x > chartInstance.scales[xAxisID].max\n      ? chartInstance.scales[xAxisID].max\n      : x;\n  x =\n    x < chartInstance.scales[xAxisID].min\n      ? chartInstance.scales[xAxisID].min\n      : x;\n\n  y =\n    y > chartInstance.scales[yAxisID].max\n      ? chartInstance.scales[yAxisID].max\n      : y;\n  y =\n    y < chartInstance.scales[yAxisID].min\n      ? chartInstance.scales[yAxisID].min\n      : y;\n\n  if (floatingBar) {\n    // x contains the new value for one end of the floating bar\n    // dataPoint contains the old interval [left, right] of the floating bar\n    // calculate difference between the new value and both sides\n    // the side with the smallest difference from the new value was the one that was dragged\n    // return an interval with new value on the dragged side and old value on the other side\n    let newVal;\n    // choose the right variable based on the orientation of the graph(vertical, horizontal)\n    if (chartInstance.config.options.indexAxis === \"y\") {\n      newVal = x;\n    } else {\n      newVal = y;\n    }\n    const diffFromLeft = Math.abs(newVal - dataPoint[0]);\n    const diffFromRight = Math.abs(newVal - dataPoint[1]);\n\n    if (diffFromLeft <= diffFromRight) {\n      return [newVal, dataPoint[1]];\n    } else {\n      return [dataPoint[0], newVal];\n    }\n  }\n\n  if (\n    dataPoint.x !== undefined &&\n    chartInstance.config.options.plugins.dragData.dragX\n  ) {\n    dataPoint.x = x;\n  }\n\n  if (dataPoint.y !== undefined) {\n    if (chartInstance.config.options.plugins.dragData.dragY !== false) {\n      dataPoint.y = y;\n    }\n    return dataPoint;\n  } else {\n    if (chartInstance.config.options.indexAxis === \"y\") {\n      return x;\n    } else {\n      return y;\n    }\n  }\n}\n\nconst updateData = (e, chartInstance, pluginOptions, callback) => {\n  if (element) {\n    curDatasetIndex = element.datasetIndex;\n    curIndex = element.index;\n\n    isDragging = true;\n\n    let dataPoint = chartInstance.data.datasets[curDatasetIndex].data[curIndex];\n\n    if (type === \"radar\" || type === \"polarArea\") {\n      dataPoint = calcRadar(e, chartInstance);\n    } else if (stacked) {\n      let cursorPos = calcPosition(\n        e,\n        chartInstance,\n        curDatasetIndex,\n        curIndex,\n        dataPoint\n      );\n      dataPoint = roundValue(cursorPos - initValue, pluginOptions.round);\n    } else if (floatingBar) {\n      dataPoint = calcPosition(\n        e,\n        chartInstance,\n        curDatasetIndex,\n        curIndex,\n        dataPoint\n      );\n    } else {\n      dataPoint = calcPosition(\n        e,\n        chartInstance,\n        curDatasetIndex,\n        curIndex,\n        dataPoint\n      );\n    }\n\n    if (\n      !callback ||\n      (typeof callback === \"function\" &&\n        callback(e, curDatasetIndex, curIndex, dataPoint) !== false)\n    ) {\n      chartInstance.data.datasets[curDatasetIndex].data[curIndex] = dataPoint;\n      chartInstance.update(\"none\");\n    }\n  }\n};\n\n// Update values to the nearest values\nfunction applyMagnet(chartInstance, i, j) {\n  const pluginOptions = chartInstance.config.options.plugins.dragData;\n  if (pluginOptions.magnet) {\n    const magnet = pluginOptions.magnet;\n    if (magnet.to && typeof magnet.to === \"function\") {\n      let data = chartInstance.data.datasets[i].data[j];\n      data = magnet.to(data);\n      chartInstance.data.datasets[i].data[j] = data;\n      chartInstance.update(\"none\");\n      return data;\n    }\n  } else {\n    return chartInstance.data.datasets[i].data[j];\n  }\n}\n\nconst dragEndCallback = (e, chartInstance, callback) => {\n  // eslint-disable-next-line no-unused-expressions\n  curDatasetIndex, (curIndex = undefined);\n  isDragging = false;\n  // re-enable the tooltip animation\n  if (chartInstance.config.options.plugins.tooltip) {\n    chartInstance.config.options.plugins.tooltip.animation = eventSettings;\n    chartInstance.update(\"none\");\n  }\n\n  // chartInstance.update('none')\n  if (typeof callback === \"function\" && element) {\n    const datasetIndex = element.datasetIndex;\n    const index = element.index;\n    let value = applyMagnet(chartInstance, datasetIndex, index);\n    return callback(e, datasetIndex, index, value);\n  }\n};\n\nconst ChartJSdragDataPlugin = {\n  id: \"dragdata\",\n  afterInit: function (chartInstance) {\n    if (\n      chartInstance.config.options.plugins &&\n      chartInstance.config.options.plugins.dragData\n    ) {\n      const pluginOptions = chartInstance.config.options.plugins.dragData;\n      select(chartInstance.canvas).call(\n        drag()\n          .container(chartInstance.canvas)\n          .on(\"start\", (e) =>\n            getElement(e.sourceEvent, chartInstance, pluginOptions.onDragStart)\n          )\n          .on(\"drag\", (e) =>\n            updateData(\n              e.sourceEvent,\n              chartInstance,\n              pluginOptions,\n              pluginOptions.onDrag\n            )\n          )\n          .on(\"end\", (e) =>\n            dragEndCallback(\n              e.sourceEvent,\n              chartInstance,\n              pluginOptions.onDragEnd\n            )\n          )\n      );\n    }\n  },\n  beforeEvent: function (chart, args) {\n    if (isDragging) {\n      chart.tooltip.update();\n      return false;\n    }\n  }\n  /*\n  afterEvent: function (chart) { \n    if (!element) return    \n    if (isDragging) {\n      \n      chart.tooltip.setActiveElements([element],{\n        x: element.element.x,\n        y: element.element.y\n      })\n    }\n  }\n  */\n};\nChart.register(ChartJSdragDataPlugin);\n\nexport default ChartJSdragDataPlugin;\n","/Users/max/Documents/GitHub/Projection/src/components/Modals/selectAssets.js",["122","123"],"import React from \"react\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@mui/material/Button\";\nimport Input from \"@mui/material/Input\";\nimport { getCoins } from \"../../adapters/apis\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"./selectAssets.module.css\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport DeleteSvg from \"../../assets/images/Union.svg\";\nimport EditSvg from \"../../assets/images/Subtract.svg\";\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: \"#fff\",\n    color: \"#000\",\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  \"&:nth-of-type(odd)\": {\n    backgroundColor: \"#F8F9FA\",\n  },\n}));\n\nfunction AssetsTable({ coins }) {\n  return (\n    <TableContainer\n      sx={{ borderRadius: 0, boxShadow: \"none\" }}\n      component={Paper}\n    >\n      <Table aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell\n              sx={{ border: 0, fontWeight: 700, fontSize: \"16px\" }}\n            >\n              Assets\n            </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {coins.map((coin, index) => (\n            <StyledTableRow key={index}>\n              <StyledTableCell sx={{ border: 0 }} component=\"th\" scope=\"row\">\n                + {coin.symbol}\n              </StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default function SelectAssets({\n  setSelectedCoins,\n  value,\n  selectedCoins,\n  setValue,\n  setErreur,\n  setShowErr,\n}) {\n  const rx_live = /^\\d+(?:[.,]{1}\\d*)?$/;\n  const [showQt, setShowQt] = React.useState(false);\n  const [coins, setCoins] = React.useState([]);\n  const [currentCoin, setCurrentCoin] = React.useState(null);\n  const [currentPrice, setCurrentPrice] = React.useState(0);\n  const [qt, setQt] = React.useState(0);\n\n  React.useEffect(() => {\n    const localCoins = localStorage.getItem(\"coins\");\n\n    if (!localCoins || JSON.parse(localCoins).length === 0)\n      getCoins().then((res) => {\n        setCoins(res.data);\n        localStorage.setItem(\"coins\", JSON.stringify(res.data));\n      });\n    else setCoins(JSON.parse(localCoins));\n  }, []);\n\n  const addQuantity = (value) => {\n    const exist = selectedCoins.some((elem) => elem.name === value.name);\n    if (exist) {\n      setErreur(\"Coin already added!\");\n      setShowErr(true);\n      return;\n    }\n\n    setShowErr(false);\n    setErreur(\"\");\n    setCurrentCoin(value);\n    setShowQt(true);\n    setQt(0);\n    setCurrentPrice(0);\n  };\n\n  const handleQtChange = (event) => {\n    let val = event.target.value;\n    val = val.replace(\",\", \".\");\n    if (rx_live.test(val)) setQt(val);\n  };\n  const handleCpChange = (event) => {\n    let val = event.target.value;\n    val = val.replace(\",\", \".\");\n    if (rx_live.test(val)) setCurrentPrice(val);\n  };\n\n  const addCoins = () => {\n    selectedCoins.push({\n      ...currentCoin,\n      quantity: parseFloat(qt),\n      currentPrice: parseFloat(currentPrice),\n    });\n    setSelectedCoins(selectedCoins);\n    setCurrentCoin(null);\n    setValue(null);\n  };\n  const handelAfterAddQ = () => {\n    if (qt <= 0 || isNaN(qt)) {\n      setErreur(\"Amount must be greater than 0 !\");\n      setShowErr(true);\n      return;\n    }\n    if (currentPrice <= 0 || isNaN(currentPrice)) {\n      setErreur(\"Current Price must be greater than 0 !\");\n      setShowErr(true);\n      return;\n    }\n    addCoins(qt);\n    setQt(0);\n    setCurrentPrice(0);\n    setShowQt(false);\n    setShowErr(false);\n  };\n  return (\n    <>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === \"string\") {\n            setValue({\n              name: newValue,\n            });\n            addQuantity(newValue);\n          } else if (newValue && newValue.inputValue) {\n            // Create a new value from the user input\n            setValue({\n              name: newValue.inputValue,\n            });\n            addQuantity({ name: newValue.inputValue, symbol: \"\" });\n          } else {\n            setValue(newValue);\n            if (newValue) addQuantity(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const { inputValue } = params;\n          if (inputValue.length === 0) return [];\n          const filtered = options.filter(\n            (item) =>\n              item.name.toLowerCase().startsWith(inputValue) ||\n              item.symbol.toLowerCase().startsWith(inputValue)\n          );\n\n          // Suggest the creation of a new value\n          const isExisting = options.some(\n            (option) => inputValue === option.name\n          );\n          if (inputValue !== \"\" && !isExisting) {\n            filtered.push({\n              inputValue,\n              name: `Add \"${inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        id=\"free-solo-with-text-demo\"\n        options={coins}\n        getOptionLabel={(option) => {\n          if (typeof option === \"string\") {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.name;\n        }}\n        renderOption={(props, option) => <li {...props}>{option.name}</li>}\n        sx={{ width: \"100%\" }}\n        freeSolo\n        renderInput={(params) => <TextField {...params} label=\"Assets\" />}\n      />\n      {showQt ? (\n        <div className={styles[\"div-flex\"]}>\n          <InputLabel htmlFor=\"component-helper\">Amount</InputLabel>\n\n          <Input\n            type=\"text\"\n            value={qt}\n            placeholder=\"Amount\"\n            onChange={handleQtChange}\n          />\n          <InputLabel htmlFor=\"component-helper\">Current price</InputLabel>\n\n          <Input\n            type=\"text\"\n            placeholder=\"Current price\"\n            value={currentPrice}\n            onChange={handleCpChange}\n          />\n\n          <Button variant=\"contained\" onClick={handelAfterAddQ}>\n            add coin\n          </Button>\n        </div>\n      ) : (\n        \"\"\n      )}\n      \n      {selectedCoins.length  ? <AssetsTable coins={selectedCoins} /> : \"\"}\n    </>\n  );\n}\n","/Users/max/Documents/GitHub/Projection/src/components/action/action.js",[],"/Users/max/Documents/GitHub/Projection/src/components/Modals/actionListModal.js",["124"],"/Users/max/Documents/GitHub/Projection/src/components/action/swap.js",["125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":12},{"ruleId":"134","severity":1,"message":"135","line":37,"column":6,"nodeType":"136","endLine":37,"endColumn":8,"suggestions":"137"},{"ruleId":"130","severity":1,"message":"138","line":5,"column":3,"nodeType":"132","messageId":"133","endLine":5,"endColumn":28},{"ruleId":"130","severity":1,"message":"139","line":15,"column":8,"nodeType":"132","messageId":"133","endLine":15,"endColumn":14},{"ruleId":"130","severity":1,"message":"140","line":22,"column":8,"nodeType":"132","messageId":"133","endLine":22,"endColumn":15},{"ruleId":"130","severity":1,"message":"141","line":23,"column":8,"nodeType":"132","messageId":"133","endLine":23,"endColumn":29},{"ruleId":"130","severity":1,"message":"138","line":10,"column":3,"nodeType":"132","messageId":"133","endLine":10,"endColumn":28},{"ruleId":"130","severity":1,"message":"142","line":15,"column":10,"nodeType":"132","messageId":"133","endLine":15,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":45,"column":62,"nodeType":"145","messageId":"146","endLine":45,"endColumn":64},{"ruleId":"134","severity":1,"message":"147","line":60,"column":6,"nodeType":"136","endLine":60,"endColumn":8,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":69,"column":5,"nodeType":"151","messageId":"152","endLine":75,"endColumn":7},{"ruleId":"143","severity":1,"message":"153","line":90,"column":15,"nodeType":"145","messageId":"146","endLine":90,"endColumn":17},{"ruleId":"143","severity":1,"message":"153","line":107,"column":22,"nodeType":"145","messageId":"146","endLine":107,"endColumn":24},{"ruleId":"130","severity":1,"message":"154","line":10,"column":8,"nodeType":"132","messageId":"133","endLine":10,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":293,"column":18,"nodeType":"157","messageId":"158","endLine":293,"endColumn":19},{"ruleId":"130","severity":1,"message":"159","line":17,"column":8,"nodeType":"132","messageId":"133","endLine":17,"endColumn":17},{"ruleId":"130","severity":1,"message":"160","line":18,"column":8,"nodeType":"132","messageId":"133","endLine":18,"endColumn":15},{"ruleId":"130","severity":1,"message":"139","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":14},{"ruleId":"130","severity":1,"message":"161","line":73,"column":11,"nodeType":"132","messageId":"133","endLine":73,"endColumn":16},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'routers'. Either include it or remove the dependency array.","ArrayExpression",["164"],"'EDIT_ACTION_TO_Projection' is defined but never used.","'Button' is defined but never used.","'Action1' is defined but never used.","'Add_Edit_PorjectModal' is defined but never used.","'ModalEdit' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has missing dependencies: 'projectEdit', 'projectionId', 'projections', and 'who'. Either include them or remove the dependency array.",["165"],"react/jsx-pascal-case","Imported JSX component Add_Edit_PorjectModal must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Expected '!==' and instead saw '!='.","'DateFnsUtils' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'DeleteSvg' is defined but never used.","'EditSvg' is defined but never used.","'range' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: [routers]",{"range":"170","text":"171"},"Update the dependencies array to be: [projectEdit, projectionId, projections, who]",{"range":"172","text":"173"},[1173,1175],"[routers]",[1926,1928],"[projectEdit, projectionId, projections, who]"]